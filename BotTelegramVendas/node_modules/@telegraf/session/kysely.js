"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KyselyStore = void 0;
const kysely_1 = require("kysely");
const defaults_1 = require("./defaults");
/** @unstable */
const KyselyStore = (opts) => {
    var _a;
    // this assertion is a hack to make the Database type work
    const table = ((_a = opts.table) !== null && _a !== void 0 ? _a : defaults_1.defaults.table);
    const client = new kysely_1.Kysely(opts.config);
    const create = client.schema
        .createTable(table)
        .ifNotExists()
        .addColumn("key", "varchar(32)", col => col.primaryKey().notNull())
        .addColumn("session", "text")
        .execute();
    if ("onInitError" in opts)
        create.catch(opts.onInitError);
    return {
        async get(key) {
            var _a;
            await create;
            const value = (_a = (await client
                //
                .selectFrom(table)
                .select("session")
                .where("key", "=", key)
                .limit(1)
                .executeTakeFirst())) === null || _a === void 0 ? void 0 : _a.session;
            return value ? JSON.parse(value) : undefined;
        },
        async set(key, value) {
            await create;
            const session = JSON.stringify(value);
            const res = await (opts.config.dialect instanceof kysely_1.MysqlDialect
                ? client
                    .insertInto(table)
                    .values({ key, session })
                    // MySQL has ON DUPLICATE KEY UPDATE
                    .onDuplicateKeyUpdate({ session })
                : client
                    .insertInto(table)
                    .values({ key, session })
                    // Postgres and SQLITE have ON CONFLICT DO UPDATE SET
                    .onConflict(b => b.column("key").doUpdateSet({ session }))).executeTakeFirst();
        },
        async delete(key) {
            await create;
            await client //
                .deleteFrom(table)
                .where("key", "=", key)
                .executeTakeFirst();
        },
    };
};
exports.KyselyStore = KyselyStore;
