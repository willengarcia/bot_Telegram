import { createClient } from "redis";
import type { RedisClientOptions } from "redis";
import { SessionStore } from "./types";
type Client = ReturnType<typeof createClient>;
interface NewClientOpts {
    /**
     * `redis[s]://[[username][:password]@][host][:port][/db-number]`
     *
     * See [`redis`](https://www.iana.org/assignments/uri-schemes/prov/redis) and [`rediss`](https://www.iana.org/assignments/uri-schemes/prov/rediss) IANA registration for more details
     */
    url?: string;
    config?: Omit<RedisClientOptions, "url">;
    /** Prefix to use for session keys. Defaults to "telegraf:". */
    prefix?: string;
    /** Called on fatal connection or setup errors */
    onInitError?: (err: unknown) => void;
}
interface ExistingClientOpts {
    /** If passed, we'll reuse this client instead of creating our own. */
    client: Client;
    /** Prefix to use for session keys. Defaults to "telegraf:". */
    prefix?: string;
}
/** @unstable */
export declare function Redis<Session>(opts: NewClientOpts): SessionStore<Session>;
export declare function Redis<Session>(opts: ExistingClientOpts): SessionStore<Session>;
export {};
